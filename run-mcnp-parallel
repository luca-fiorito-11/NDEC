#!/bin/bash
#===============================================================================
#
# FILE: run-mcnp-parallel
#
# USAGE: ./run-mcnp-parallel [options]
#
# DESCRIPTION: run mCNP calculations in parallel using different inputs and xsdir
#
# OPTIONS: see 'USAGE' below
# REQUIREMENTS: ---
# BUGS: ---
# NOTES: ---
# AUTHOR: Luca Fiorito, luca.fiorito@oecd.org
# COMPANY: OECD/NEA
# VERSION: ---
# CREATED: 08.12.2017
# REVISION: ---
#===============================================================================

#################
# Default options
#################
CODE=$(basename "$0") 
JOBLOG="out.log"
USAGE="
DESCRIPTION
-----------



USAGE
-----

$CODE  XSDIR  INPUT-LIST  [options]



POSITIONAL ARGUMENTS
--------------------

XSDIR                       xsdir text file.
                            If option --xsdir-list is activated, XSDIR is a text file containing 
                            a list of all the xsdir files that must be used (one file per line).

                            e.g. file.txt:
                                /path/to/xsdir/file-1.inp
                                /path/to/xsdir/file-2.i
                                /path/to/xsdir/file-3.txt

INPUT-LIST                  * if INPUT-LIST is a text file:
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              it must contain a list of all the MCNP input files (ABSOLUTE path) 
                              that must be processed (one file per line).

                              e.g. file.txt:
                                   /path/to/mcnp/file-1.inp 
                                   /path/to/mcnp/file-2.i 
                                   /path/to/mcnp/file-3.txt

                              To create such a file one could make use of the bash command:

                                find  \$(pwd)  -maxdepth 1  -name \"pattern\"  -type f  -o  -type l

                            * if INPUT-LIST is a directory:
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              all the files contained in the selected directory are processed.

                            * if INPUT-LIST is not given:
                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                              an interactive command line interface will guide the user in 
                              creating the list of MCNP input files to be processed.



OPTIONAL ARGUMENTS
------------------

-h| --help                  Print the help text.

--xsdir-list                When this option is active, the positional argument XSDIR is considered
                            as a text file containing a list of xsdir filenames.

--mcnp MCNP                 Set the mcnp executable
                            (default is the MCNP6 exe at NEA)

--joblog  JOBLOG            Set the log file for GNU parallel
                            (default is 'out.log')

-n|--max-jobs   N           set the maximum number of jobs that will 
                            be run in parallel by GNU parallel
                            (default is 5)

-t|--tasks      M           set the number of tasks for each MCNP job
                            (default is 4)

--dryrun                    show what commands will be run without running them.
                            if requested, produce input lists.


ADDITIONAL INFO
---------------

*) Each MCNP input file is assumed to be complete and not have dependences on other files, e.g.
   read option, weight window options, ...
"
##########################
# Default options for MCNP
##########################
export MCNP="/opt/lab/programs/MCNP6/MCNP_CODE/bin/mcnp6"


###########################################################
# Setup input options by parsing the command line arguments
###########################################################
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -h|--help)
    echo -e "$USAGE"
    exit 0
    ;;
    --xsdir-list)
    XSDIR_LIST="--xsdir-list"
    shift # past argument
    ;;
    --joblog)
    JOBLOG="$2"
    shift # past argument
    shift # past value
    ;;
    --mcnp)
    if [[ ! -x "$2" ]]
    then
       echo -e "ERROR: Cannot execute file '$2'. File does not exist or does not have proper permission settings."
       exit 1 
    fi
    export MCNP=$(realpath "$2")
    shift # past argument
    shift # past value
    ;;
    -n|--max-jobs)
    NJOBS="$2"
    shift # past argument
    shift # past value
    ;;
    -t|--tasks)
    export NTASKS="$2"
    shift # past argument
    shift # past value
    ;;
    --dryrun)
    DRYRUN="--dryrun"
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done



#######################################################################
#######################################################################
#                                                                     #
#                          PROCESS INPUTS                             #
#                                                                     #
#######################################################################
#######################################################################
[[ -z ${POSITIONAL[0]} ]] && {>&2 echo -e "ERROR: Missing xsdir file XSDIR.\n$USAGE";exit 1;} || XSDIR="$(realpath ${POSITIONAL[0]})"
[[ -s "$XSDIR" ]] || {>&2 echo -e "ERROR: empty or non-existing xsdir file '$XSDIR'.";exit 1;}
[[ -f "$XSDIR" || -h "$XSDIR" ]] || {>&2 echo -e "ERROR: XSDIR must be a file or a symlink.";exit 1;}
if [[ -z $XSDIR_LIST ]]
then
   XSDIR_LIST=xsdir.list
   echo "$XSDIR" > "$XSDIR_LIST"
else
   XSDIR_LIST="$XSDIR"
   for file in $(sed '/^$/d' "$XSDIR_LIST")
   do
      [[ -s "$file" ]] || {>&2 echo -e "ERROR: empty or non-existing xsdir file '$file'";exit 1;}
   done
fi
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Check if mandatory inputs are present:
#   - INPUT_LIST
# If not, get the input files from the command line and save
# them in a file "input.list".
# If INPUT_LIST is a directory, create a file "input.list" with the 
# list of files and symlinks in such a directory.
# Then, check that all input files exist.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if [[ -z ${POSITIONAL[1]} ]]
then
   echo -e "Provide a list of MCNP input files (including path, either absolute or relative to the current working directory).\nEnter one filename per line and terminate with 'DONE'."
   LIST=()
   read -p "Enter MCNP input file : " INPUT
   while [[ "$INPUT" != "DONE"  ]]
   do
      LIST+=($(realpath "$INPUT"))
      read -p "Enter MCNP input file : " INPUT
   done
   INPUT_LIST="input.list"
   printf '%s\n' "${LIST[@]}" > ${INPUT_LIST}
else
   INPUT_LIST="$(realpath ${POSITIONAL[1]})"
fi
[[ -s "$INPUT_LIST" ]] || {>&2 echo -e "ERROR: empty or non-existing list of MCNP input files.";exit 1;}
if [[ -d "$INPUT_LIST" ]]
then
   find $(realpath $INPUT_LIST) -maxdepth 1 -type f -o -type l > input.list
   INPUT_LIST="input.list"
fi
for file in $(sed '/^$/d' "$INPUT_LIST")
do
   [[ -s "$file" ]] || {>&2 echo -e "ERROR: empty or non-existing MCNP input file '$file'";exit 1;}
done
####################################################################
# If INPUT_LIST is a directory, create a file "input.list" with the 
# list of files and symlinks in such a directory.
####################################################################
if [[ -d "$INPUT_LIST" ]]
then
   find $(realpath $INPUT_LIST) -maxdepth 1 -type f -o -type l > input.list
   INPUT_LIST="input.list"
fi
##########################################################
# parallel is a shell tool for executing jobs in parallel.
# OPTIONS:
#   --no-run-if-empty: skip empty lines in input files
#   -j $NJOBS: run a maximum of $NJOBS in parallel
#   --joblog $JOBLOG: write logs in file $JOBLOG 
#   --linebuffer: do not postpone the stdout when 
#                 command completes
##########################################################
PARALLEL="parallel --no-run-if-empty -j ${NJOBS-5} --joblog $JOBLOG --linebuffer $DRYRUN"



#######################################################################
#######################################################################
#                                                                     #
#                           FUNCTIONS                                 #
#                                                                     #
#######################################################################
#######################################################################
run_mcnp () {
#=== FUNCTION =========================================================
# NAME: run_mcnp
# DESCRIPTION: Run MCNP calculation for given input and xsdir.
# PARAMETER 1: input file (absolute path)
# PARAMETER 2: xsdir file (absolute path)
#======================================================================
MCNP_INPUT="$1"
MCNP_XSDIR="$2"
name_input=$(basename "$MCNP_INPUT")
name_xsdir=$(basename "$MCNP_XSDIR")
WDIR="RUN_${name_xsdir}/RUN_${name_input}"
[[ ! -d "$WDIR" ]] && mkdir -p "$WDIR"
printf "INPUT: %-30s\tXSDIR: %-20s ..... START at %s\n" $(basename "$MCNP_INPUT") $(basename "$MCNP_XSDIR") $(date +"%T")
(cd "$WDIR" && "$MCNP" i="$MCNP_INPUT" n="${name_input}." xsdir="$MCNP_XSDIR" tasks ${NTASKS-4} &> "${name_input}.log")
printf "INPUT: %-30s\tXSDIR: %-20s ..... END at %s\n" $(basename "$MCNP_INPUT") $(basename "$MCNP_XSDIR") $(date +"%T")
}



#######################################################################
#######################################################################
#                                                                     #
#                         RUN CALCULATIONS                            #
#                                                                     #
#######################################################################
#######################################################################
export -f run_mcnp
$PARALLEL run_mcnp {} {} :::: "$INPUT_LIST" "$XSDIR_LIST"
