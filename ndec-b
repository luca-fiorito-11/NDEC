#!/bin/bash
#===============================================================================
#
# FILE: ndec-b
#
# USAGE: ndec-b
#
# DESCRIPTION: see 'DESCRIPTION' below
#
# OPTIONS: see 'USAGE' below
# REQUIREMENTS: ---
# BUGS: ---
# NOTES: ---
# AUTHOR: Luca Fiorito, luca.fiorito@oecd.org
# COMPANY: OECD/NEA
# VERSION: ---
# CREATED: 28.02.2018
# REVISION: ---
#===============================================================================

#################
# Default options
#################
#set -e
export SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"                  # Directory of this script
CODE=$(basename "$0") 
USAGE="
DESCRIPTION
-----------
Run NJOY calculations in parallel using different ENDF-6 files
Need ace files for isotopes at room temperature.

IMPORTANT: the ace files produced by the NJOY runs will be copied to the datapath defined in the xsdir file, 
hence some existing files could be replaced.
Make sure that thish is exactly what desired, else change the datapath and move the ace files accordingly.



USAGE
-----

$CODE  XSDIR  INPUT-LIST  [options]



POSITIONAL ARGUMENTS
--------------------

XSDIR                            Template xsdir for the NDEC calcualtion. XSDIR must contain, in order:

                                    * the datapath, of the type:

                                        DATAPATH=/path/to/ace/files

                                      Notice that 1) the word \"datapath\" (case insensitive) must only be present
                                      in the first line of XSDIR, 2) a \"=\" sign must separate \"datapath\"
                                      from the actual directory path.

                                    * the atomic weight ratios section.

                                    * the word \"directory\", plus the ace file pointers for all the isotopes
                                      needed to run the pre-defined suite of MCNP benchmarks and that are not 
                                      given in input list.


OPTIONAL ARGUMENTS
------------------

INPUT-LIST                       * if INPUT-LIST is a text file:
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   it must contain a list of all the ENDF-6 files (ABSOLUTE path) 
                                   that must be processed.

                                   e.g. file.txt:
                                        /path/to/file-1.endf6 
                                        /path/to/file-2.endf6 
                                        /path/to/file-3.endf6 

                                   To create such a file one could make use of the bash command:

                                     find  \$(pwd)  -maxdepth 1  -name \"pattern\"  -type f  -o  -type l

                                 * if INPUT-LIST is a directory:
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   all the files contained in the selected directory are processed.
                                   that must be processed is created using all the files in the
                                   selected directory.

                                 * if INPUT-LIST is not given:
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                   the NJOY processing will be skipped in favor of the MCNP benchmarking 
                                   calculations, which will start with the given xsdir files without 
                                   modifications.

-h| --help                       Print the help text.

--ace-only                       Run NJOY only for the production of the ACE files.

--run-njoy-parallel  SCRIPT      (DEVELOPER'S OPTION ONLY) set a different script \"run-njoy-parallel\".

--run-mcnp-parallel  SCRIPT      (DEVELOPER'S OPTION ONLY) set a different script \"run-mcnp-parallel\".

-p|--processing                  Run processing option.

-b|--benchmark-suites M B1,..,BM Define the benchmark suites that must be run.
                                 M is the number of entries that follow.
                                 B1 to BM are text files containing MCNP input file names.
                                 Each text file must contain a list of MCNP input files (ABSOLUTE path)
                                 that must be processed (one file per line).

                                  e.g. file.txt:
                                       /path/to/mcnp/file-1.inp
                                       /path/to/mcnp/file-2.i
                                       /path/to/mcnp/file-3.txt

--max-jobs-mcnp  NNJOY           Set the maximum number of NJOY jobs that will be run in parallel by GNU parallel.
                                 (default is 28)

--max-jobs-mcnp  NMCNP           Set the maximum number of MCNP jobs that will be run in parallel by GNU parallel.
                                 (default is 7)

--tasks  TASKS                   Set the number of tasks for each MCNP job.
                                 (default is 4)
"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# parallel is a shell tool for executing jobs in parallel.
# OPTIONS:
#   --no-run-if-empty: skip empty lines in input files
#   -j $NJOBS: run a maximum of $NJOBS in parallel
#   --joblog $JOBLOG: write logs in file $JOBLOG 
#   --linebuffer: do not postpone the stdout when 
#                 command completes
#   --dryrun: show commands but do not run
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PARALLEL="parallel --no-run-if-empty -j ${NJOBS-5} --linebuffer ${DRYRUN}"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get mcnp executable in PATH.
# If not present, exit with ERROR.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ -x $MCNP ]] || export MCNP=$(which mcnp6)
[[ -x $MCNP ]] || export MCNP=$(which mcnp)
[[ -x $MCNP ]] || {>&2 echo -e "ERROR: could not find njoy executable file in PATH. Add executable to path with either name 'mcnp6' or 'mcnp'"; exit 1;}



#######################################################################
#######################################################################
#                                                                     #
#                           FUNCTIONS                                 #
#                                                                     #
#######################################################################
#######################################################################
run_mcnp_parallel () {
#=== FUNCTION =========================================================
# NAME: run_mcnp_parallel
# DESCRIPTION: Run MCNP calculation for given input and xsdir.
# PARAMETER 1: input file (absolute path)
# PARAMETER 2: xsdir file (absolute path)
#======================================================================
MCNP_INPUT="$1"
MCNP_XSDIR="$2"
name_input=$(basename "$MCNP_INPUT")
name_xsdir=$(basename "$MCNP_XSDIR")
WDIR="RUN_${name_input}"
[[ ! -d "$WDIR" ]] && mkdir -p "$WDIR"
printf "INPUT: %-30s\tXSDIR: %-20s ..... START at %s\n" $(basename "$MCNP_INPUT") $(basename "$MCNP_XSDIR") $(date +"%T")
(
cd "$WDIR" && "$MCNP" i="$MCNP_INPUT" n="${name_input}." xsdir="$MCNP_XSDIR" tasks ${NTASKS-4} &> "${name_input}.log"
)
printf "INPUT: %-30s\tXSDIR: %-20s ..... END at %s\n" $(basename "$MCNP_INPUT") $(basename "$MCNP_XSDIR") $(date +"%T")
}



#######################################################################
#######################################################################
#                                                                     #
#                          NDEC BENCHMARKING                          #
#                                                                     #
#######################################################################
#######################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get list of MCNP input files from user prompt.
# Check if given input is a file or a directory, else exit with error.
# * if input is a directory: each file in the directory corresponds
#   to a MCNP input
# * if input is file: each line in the file correspond to a
#   MCNP input
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
read -p "Enter the list of MCNP input files to process (it can be a file or a folder): " FILELIST
if [[ -d "$FILELIST" ]]
then
   FILELIST=($(find $(realpath "$FILELIST") -maxdepth 1 -type f -o -type l))
elif [[ -s "$FILELIST" ]]
then
   FILELIST=($(cat "$FILELIST"))
else
   >&2 echo -e "ERROR: no file or directory called '$FILELIST'"; exit 1
fi
[[ ${#FILELIST[@]} -eq 0 ]] && {>&2 echo -e "ERROR: no MCNP input file was given.";exit 1;}
printf 'List of MCNP input files:\n'
printf ' - %s\n' "${FILELIST[@]}"
printf '%d files given\n' "${#FILELIST[@]}"
for file in ${FILELIST[@]}
do
   [[ -s "$file" ]] || { >&2 echo -e "ERROR: empty or non-existing MCNP input file '$file'"; exit 1; }
done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get working directory from prompt.
# Default is pwd.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
read -p "Enter the target working directory [.]: " CWD
CWD="$(realpath ${CWD:-$(pwd)})"
[[ -d "$CWD" ]] || { mkdir -p "$CWD";echo "Make working directory '$CWD'"; }
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get XSDIR file.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
read -p "Provide the XSDIR file: " XSDIR
XSDIR="$(realpath $XSDIR)"
[[ -s "$XSDIR" ]] || {>&2 echo -e "ERROR: empty or non-existing XSDIR file.";exit 1;}



#######################################################################
#######################################################################
#                                                                     #
#                       RUN MCNP BENCHMARKING                         #
#                                                                     #
#######################################################################
#######################################################################
echo -e "\nCheck xsdir entries for benchmark suite..."
ISO=($(grep  -vh "^[Cc]" ${FILELIST[@]} | grep -o "[0-9]\{4,6\}\.[0-9]\{2\}[cC]" | sort | uniq))
for iso in ${ISO[@]}
do
  grep -q "${iso::-1}[cC]" "$XSDIR" || {>&2 echo -e "ERROR: Missing entry for '$iso' in xsdir file.";exit 1;}
done
echo -en "\e[1A"; echo -e "\e[0K\rAll requested xsdir entries for benchmark suite are present."

export -f run_mcnp_parallel
( cd $CWD && $PARALLEL "run_mcnp_parallel {} $XSDIR" ::: ${FILELIST[@]} )
