#!/bin/bash
#===============================================================================
#
# FILE: ndec-p
#
# USAGE: ndec-p
#
# DESCRIPTION: see 'DESCRIPTION' below
#
# OPTIONS: see 'USAGE' below
# REQUIREMENTS: ---
# BUGS: ---
# NOTES: ---
# AUTHOR: Luca Fiorito, luca.fiorito@oecd.org
# COMPANY: OECD/NEA
# VERSION: ---
# CREATED: 18.12.2017
# REVISION: ---
#===============================================================================

#################
# Default options
#################
#set -e
export SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"                  # Directory of this script
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# parallel is a shell tool for executing jobs in parallel.
# OPTIONS:
#   --no-run-if-empty: skip empty lines in input files
#   -j $NJOBS: run a maximum of $NJOBS in parallel
#   --joblog $JOBLOG: write logs in file $JOBLOG 
#   --linebuffer: do not postpone the stdout when 
#                 command completes
#   --dryrun: show commands but do not run
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PARALLEL="parallel --no-run-if-empty -j ${NJOBS-20} --linebuffer ${DRYRUN}"



#######################################################################
#######################################################################
#                                                                     #
#                           FUNCTIONS                                 #
#                                                                     #
#######################################################################
#######################################################################
run-njoy-parallel () {
#=== FUNCTION =========================================================
# NAME: run-njoy-parallel
# DESCRIPTION: Run NJOY calculation for a given ENDF-6 file using 
#              "run-njoy" script.
#              Use option --wdir to run the calculation in a subfolder
#              with the same name as the basename of the ENDF-6 file.
#              e.g. if the name of the file is "1-H-1g.jeff33", "run-njoy"
#                   will be run in relative folder "./1-H-1g.jeff33/".
#              Use option --aceonly only if set.
#              Send stdout to /dev/null to avoid overlapping the stdout
#              of different NJOY parallel runs.
# PARAMETER 1: ENDF/6 file (absolute path)
#======================================================================
NAME="$(basename $1)"
DIR="$CWD/$NAME"
mkdir -p "$DIR"
printf "\nStarted job %s at %s\n" "$NAME" $(date +"%T")
(
cd "$DIR" &&
"$SCRIPTDIR/run-njoy" "$1" \
                      "$COVR" \
                      "$MESSAGES" \
                      "$HENDF" \
                      --prefix "$NAME" \
                      > /dev/null 
)
printf "\nFinished job %s at %s\n" $(basename "$1") $(date +"%T")
}



#######################################################################
#######################################################################
#                                                                     #
#                          NDEC PROCESSING                            #
#                                                                     #
#######################################################################
#######################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get list of input files from user prompt.
# Check if given input is a file or a directory, else exit with error.
# * if input is a directory: each file in the directory corresponds 
#   to a ENDF-6 input
# * if input is file: each line in the file correspond to a 
#   ENDF-6 input
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
read -p "Enter the list of ENDF-6 files to process (it can be a file or a folder): " FILELIST
if [[ -d "$FILELIST" ]]
then
   FILELIST=($(find $(realpath "$FILELIST") -maxdepth 1 -type f -o -type l))
elif [[ -s "$FILELIST" ]]
then
   FILELIST=($(cat "$FILELIST"))
else
   >&2 echo -e "ERROR: no file or directory called '$FILELIST'"; exit 1
fi
[[ ${#FILELIST[@]} -eq 0 ]] && {>&2 echo -e "ERROR: no ENDF-6 file was given.";exit 1;}
printf 'List of ENDF-6 files:\n'
printf ' - %s\n' "${FILELIST[@]}"
printf '%d files given\n' "${#FILELIST[@]}"
for file in ${FILELIST[@]}
do
   [[ -s "$file" ]] || { >&2 echo -e "ERROR: empty or non-existing ENDF-6 file '$file'"; exit 1; }
done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get working directory from prompt.
# Default is pwd.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
read -p "Enter the target working directory [.]: " CWD
export CWD="${CWD:-$(pwd)}"
mkdir -p "$CWD" 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set up advanced options.
# If "n" is selected used defaults:
#   * no covariance processing
#   * no warning/error checking
#   * no hendf file
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true
do
   read -p "Do you wish to set up advanced options? [y/n] " yn
   case $yn in
      [Yy]* )
      while true
      do
         read -p "Do you wish to process covariances? [y/n] " yn
         case $yn in
            [Yy]* ) export COVR="--covr"; break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.";;
         esac
      done
      while true
      do
         read -p "Do you wish to check warnings and errors? [y/n] " yn
         case $yn in
            [Yy]* ) export MESSAGES="--messages"; break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.";;
         esac
      done
      while true
      do
         read -p "Do you wish to produce hendf files? [y/n] " yn
         case $yn in
            [Yy]* ) export HENDF="--hendf"; break;;
            [Nn]* ) break;;
            * ) echo "Please answer yes or no.";;
         esac
      done
      break
      ;;
      [Nn]* ) break;;
      * ) echo "Please answer yes or no.";;
   esac
done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Give XSDIR file if processed END-6 files are to be added.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
while true; do
 read -p "Do you wish to add the ACE files to an existing XSDIR? [y/n] " yn
 case $yn in
    [Yy]* ) 
    read -p "Enter the XSDIR file name: " XSDIR
    [[ -s "$XSDIR" ]] || { >&2 echo -e "ERROR: empty or non-existing XSDIR file '$XSDIR'"; exit 1; }
    break
    ;;
    [Nn]* ) break;;
    * ) echo "Please answer yes or no.";;
 esac
done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run script "run-njoy" in parallel mode
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
printf '%s\n' "${FILELIST[@]}" > ".tmplist"
export -f run-njoy-parallel
$PARALLEL run-njoy-parallel {} :::: ".tmplist"
rm -f ".tmplist"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# If xsdir is given, add/replace lines corresponding to 
# the processed ENDF-6 files.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
if [[ ! -z $XSDIR ]]
then
   for file in  $(find "$CWD" -type f -name "*\.XSDIR" | sort)
   do
      LINE=""
      while read -r line; do LINE="$LINE$line\n"; done < "$file"
      LINE="$(echo ${LINE::${#A}-2} | tr -s ' ')"
      PATTERN="$( echo $LINE | awk '{print $1}')"
      COUNT=$(grep -c "$PATTERN" "$XSDIR")
      if [[ $COUNT -eq 0 ]]
      then
         COMMAND="$COMMAND -e '$ a\ ${LINE}'"
      else
         COMMAND="$COMMAND -e 's|.*${PATTERN}.*|${LINE}|g'"
      fi
   done
   [[ -z $COMMAND ]] || { COMMAND="sed $COMMAND < $XSDIR > \"$CWD/$(basename $XSDIR)\""; eval "$COMMAND";}
fi
