#!/bin/bash
#===============================================================================
#
# FILE: run-prepro
#
# USAGE: run-prepro FILE [OPTIONS]
#
# DESCRIPTION: 
#
# OPTIONS: see function ’usage’ below
# REQUIREMENTS: ---
# BUGS: ---
# NOTES: ---
# AUTHOR: Luca Fiorito, luca.fiorito@oecd.org
# COMPANY: OECD/NEA
# VERSION: ---
# CREATED: 23.02.2018
# REVISION: ---
#===============================================================================

#################
# Default options
#################
CODE=$(basename $0)
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
SEED="$1"

USAGE="Usage:

$CODE  FILE  [options]


POSITIONAL ARGUMENTS
--------------------

FILE                        input ENDF-6 file.


KEYWORD ARGUMENTS
-----------------

-h|--help                   Print the help text.

--prefix  PREFIX            Set the output prefix PREFIX.
                            output files are named \"PREFIX.[extension]\".
                            Prefix must be one word and not contain reserved characters.
                            (default is \"prepro\")

--keependf                  Save ENDF-6 input in working folder with name
                            \"PREFIX.ENDF\".

-m|--messages               Parse the PREPRO output file for warnings and errors.
                            The messages are reported in a xml file.
"
MODULES=('endf2c' 'linear' 'recent' 'sigma1' 'activate' 'legend' 'fixup')



#######################################################################
#######################################################################
#                                                                     #
#                           FUNCTIONS                                 #
#                                                                     #
#######################################################################
#######################################################################
GetMessages () {
#=== FUNCTION =========================================================
# NAME: GetMessages
# DESCRIPTION: Extract warning/error messages from PREPRO outputs and stdout
#              and print them in xml format as:
#
#              <messages>
#               <warning module="%s" lines="%s"><![CDATA[ %s ]]></warning>
#               <error module="%s" lines="%s"><![CDATA[ %s ]]></error>
#              <messages>
#
#              "lines" is always empty.
#
# PARAMETER 1: module name in lowercase
#======================================================================
module="$1"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# XML patterns for warning and error messages.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WARN="<warning module=\"%s\" lines=\"\"><![CDATA[ %s ]]></warning>\n"
ERR="<error module=\"%s\" lines=\"\"><![CDATA[ %s ]]></error>\n"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Parse for errors.
# Parse both files .LST and .STDOUT
# If patterns:
#   - Total Execution Time
# is found in ERROR ine, then skip it because it is not a real error.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#TEXT="$(<${module^^}.LST)"
#while IFS=, read -r MODULE PATTERN MSG
#do
#   COUNT=$(echo $TEXT | grep -Po "$PATTERN" | wc -l)
#   [[ $COUNT -gt 0 ]] && printf "$ERR" "$module" "$MSG (x$COUNT)"
#done < "$SCRIPTDIR/prepro_we_database.csv"


[[ -s "${module^^}.LST" ]] && sed "s/^[ \t]*//" "${module^^}.LST" | grep -i 'ERROR' | while read line;
do
   [[ $line = *"Total Execution Time"* ]] && continue
   [[ $line = *"Interpolation to Lower Energies May Cause Errors"* ]] && continue
   printf "$ERR" "$module" "$line"
done
[[ -s "${module^^}.STDOUT" ]] && sed "s/^[ \t]*//" "${module^^}.STDOUT" | grep -i 'ERROR' | while read line;
do
   [[ $line = *"Total Execution Time"* ]] && continue
   [[ $line = *"Interpolation to Lower Energies May Cause Errors"* ]] && continue
   printf "$ERR" "$module" "$line"
done
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Parse for warnings.
# Parse both files .LST and .STDOUT
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ -s "${module^^}.LST" ]] && sed "s/^[ \t]*//" "${module^^}.LST" | grep -i 'WARNING' | while read line;
do
   printf "$WARN" "$module" "$line"
done
[[ -s "${module^^}.STDOUT" ]] && sed "s/^[ \t]*//" "${module^^}.STDOUT" | grep -i 'WARNING' | while read line;
do
   printf "$WARN" "$module" "$line"
done
}

run_module (){
#=== FUNCTION =========================================================
# NAME: run_module
# DESCRIPTION: Run PREPRO module.
# PARAMETER 1: module name (lowercase)
# PARAMETER 2: input SEED
#======================================================================
module="$1"
SEED="$2"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Different approach for module "endf2c" because it takes standard 
# input and output file "ENDFB.IN" and "ENDFB.OUT".
# Also, it does not take a .INP file.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ "$module" == "endf2c" ]] && INPUT="ENDFB.IN" || INPUT="${module^^}.IN"
[[ "$module" == "endf2c" ]] && OUTPUT="ENDFB.OUT" || OUTPUT="${module^^}.OUT"
[[ "$module" == "endf2c" ]] || COMMAND="ln -sf $SCRIPTDIR/prepro_inputs/${module^^}.INP  ${module^^}.INP"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run module in subshell with "set -e" to exit with error if 
# module fails.
# Write stderr and stdout to file .STDOUT
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(
set -e
ln -sf "$SEED" "$INPUT"
$COMMAND
"$SCRIPTDIR/PREPRO_2017/${module}"
) 2>&1 | tee "${module^^}.STDOUT"
EXIT_STATUS=$?
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Retrieve exit status. If False, append error message to 
# .STDOUT and exit with same exit status.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ $EXIT_STATUS -eq 0 && -s "$OUTPUT" ]] || { echo "ERROR module ${module} failed to run"| tee -a "${module^^}.STDOUT"; exit $EXIT_STATUS;}
}



#######################################################################
#######################################################################
#                                                                     #
#                    PARSE COMMAND LINE ARGUMENTS                     #
#                                                                     #
#######################################################################
#######################################################################
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -h|--help) # print USAGE and exit with status 0
    echo -e "$USAGE"
    exit 0
    ;;
    --prefix)
    PREFIX="$2"
    shift # past argument
    shift # past value
    ;;
    -m|--messages)
    MESSAGES=1
    shift # past argument
    ;;
    --keependf)
    KEEPENDF=1
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done



#######################################################################
#######################################################################
#                                                                     #
#                          PROCESS INPUTS                             #
#                                                                     #
#######################################################################
#######################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Get SEED (ENDF-6 file) from the list of positional arguments
# in the command line.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ ${#POSITIONAL[@]} -eq 0 ]] && {>&2 echo -e "ERROR: missing positional argument \"FILE\"."; exit 1;}
SEED="$(realpath ${POSITIONAL[0]})"
[[ -s "$SEED" ]] || {>&2 echo -e "ERROR: incorrect ENDF-6 file '$SEED'."; exit 1;}
printf "%-8s: %60s\n" "FILE" "$SEED"
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set prefix.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[[ -z $PREFIX ]] && PREFIX="prepro"








#######################################################################
#######################################################################
#                                                                     #
#                          RUN PREPRO                                 #
#                                                                     #
#######################################################################
#######################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Run in subshell, exit if one module fails
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(
set -e
run_module "endf2c" "$SEED"
run_module "linear" "ENDFB.OUT"
run_module "recent" "LINEAR.OUT"
run_module "sigma1" "RECENT.OUT"
run_module "activate" "SIGMA1.OUT"
run_module "legend" "ACTIVATE.OUT"
run_module "fixup" "LEGEND.OUT"
run_module "dictin" "FIXUP.OUT"
)
EXIT_STATUS=$?


#######################################################################
#######################################################################
#                                                                     #
#                          ERROR MESSAGES                             #
#                                                                     #
#######################################################################
#######################################################################
[[ -z $MESSAGES ]] || {
echo "<messages>"
for module in ${MODULES[@]}
do
   GetMessages "$module"
done
echo "</messages>"
} > ${PREFIX}-messages.xml



#######################################################################
#######################################################################
#                                                                     #
#                    PROCESS OUTPUT FILES                             #
#                                                                     #
#######################################################################
#######################################################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Rename outputs and write list of produced output files (use xml format).
# Use agreed elements and attributes defined in the NDEC documentation.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
OUT="${PREFIX}.output"
rm -f $OUT 
for module in ${MODULES[@]}; do [[ -s "${module^^}.LST" ]] && cat "${module^^}.LST" >> $OUT; done
{
echo "<outputs>"
[[ -s "ENDFB.IN" && ! -z $KEEPENDF ]] && { cp "$SEED" "${PREFIX}.ENDF" ; echo "<file id=\"endf\" format=\"ENDF\">${PREFIX}.ENDF</file>" ;}
[[ -s "ENDFB.OUT" ]] && { mv "ENDFB.OUT" "${PREFIX}.STD"; echo "<file id=\"std\" format=\"ENDF\">"${PREFIX}.STD"</file>"; }
[[ -s "$OUT" ]] && echo "<file id=\"prepro_output\" format=\"TEXT\">${OUT}</file>"
[[ -s "DICTIN.OUT" ]] && { mv "DICTIN.OUT" "${PREFIX}.PENDF"; echo "<file id=\"prepro_pendf\" format=\"PENDF\">${PREFIX}.PENDF</file>" ;}
echo "</outputs>"
} > "${PREFIX}-outputs.xml"
rm -f *\.INP *\.IN *\.OUT *\.LST *\.TMP *\.STDOUT



#######################################################################
#######################################################################
#                                                                     #
#                          EXIT WITH FAILURE                          #
#                                                                     #
#######################################################################
#######################################################################
[[ $EXIT_STATUS -ne "0" ]] && exit $EXIT_STATUS
